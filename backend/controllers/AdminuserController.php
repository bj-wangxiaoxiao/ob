<?php
/**
 * User: wangxiaoxiao
 * Description: 管理员管理
 */
namespace backend\controllers;

use backend\models\SignupForm;
use common\lib\ObStrHelper;
use common\models\AuthAssignment;
use common\models\AuthItem;
use Yii;
use common\models\AdminUser;
use common\models\AdminuserSearch;
use yii\behaviors\TestBehavior;
use yii\mail\MailEvent;
use yii\web\Controller;
use yii\web\NotFoundHttpException;
use yii\filters\VerbFilter;

/**
 * AdminuserSearchController implements the CRUD actions for AdminUser model.
 */
class AdminuserController extends Controller
{
	const EVENT_INDEX = 'event_index';
	public function init()
	{
		$this->on(self::EVENT_INDEX,[AdminuserSearch::class,'hello']);
		parent::init(); // TODO: Change the autogenerated stub
	}
	
	/**
     * {@inheritdoc}
     */
    public function behaviors()
    {
        return [
            'verbs' => [
                'class' => VerbFilter::className(),
                'actions' => [
                    'delete' => ['POST'],
                ],
            ],
        ];
    }
    
    /**
     * Lists all AdminUser models.
     * @return mixed
     */
    public function actionIndex()
    {
    	//1、使用行为：某个模型上
	    $searchModel = new AdminuserSearch();
	    $searchModel->test();
	    $event = new MailEvent(['message' => '调用事件传递的参数信息']);
	    //2、使用事件：当前类上
	    $this->trigger(self::EVENT_INDEX,$event);
	    $event->message = '调用行为中的事件传递的参数信息';
	    //3、使用行为中的事件：某个模型上
	    //模型绑定上行为，行为中写事件
	    $searchModel->trigger(TestBehavior::EVENT_BEHAVIOR_EVENT,$event);
	    die;
//	    $dataProvider = $searchModel->search(Yii::$app->request->queryParams);
//        return $this->render('index', [
//            'searchModel' => $searchModel,
//            'dataProvider' => $dataProvider,
//        ]);
    }

    /**
     * Displays a single AdminUser model.
     * @param integer $id
     * @return mixed
     * @throws NotFoundHttpException if the model cannot be found
     */
    public function actionView($id)
    {
        return $this->render('view', [
            'model' => $this->findModel($id),
        ]);
    }

    /**
     * Creates a new AdminUser model.
     * If creation is successful, the browser will be redirected to the 'view' page.
     * @return mixed
     */
    public function actionCreate()
    {
        $model = new SignupForm();
        if ($model->load(Yii::$app->request->post()) && $Adminuser = $model->signup()) {
            return $this->redirect(['view', 'id' => $Adminuser->admin_user_id]);
        }

        return $this->render('create', [
            'model' => $model,
        ]);
    }

    /**
     * Updates an existing AdminUser model.
     * If update is successful, the browser will be redirected to the 'view' page.
     * @param integer $id
     * @return mixed
     * @throws NotFoundHttpException if the model cannot be found
     */
    public function actionUpdate($id)
    {
        $model = $this->findModel($id);

        if ($model->load(Yii::$app->request->post()) && $model->save()) {
            return $this->redirect(['view', 'id' => $model->admin_user_id]);
        }

        return $this->render('update', [
            'model' => $model,
        ]);
    }

    /**
     * Deletes an existing AdminUser model.
     * If deletion is successful, the browser will be redirected to the 'index' page.
     * @param integer $id
     * @return mixed
     * @throws NotFoundHttpException if the model cannot be found
     */
    public function actionDelete($id)
    {
        $this->findModel($id)->delete();

        return $this->redirect(['index']);
    }

    /**
     * Finds the AdminUser model based on its primary key value.
     * If the model is not found, a 404 HTTP exception will be thrown.
     * @param integer $id
     * @return AdminUser the loaded model
     * @throws NotFoundHttpException if the model cannot be found
     */
    protected function findModel($id)
    {
        if (($model = AdminUser::findOne($id)) !== null) {
            return $model;
        }

        throw new NotFoundHttpException('The requested page does not exist.');
    }
	
	public function actionPrivilege($id)
	{
		//step1. 找出所有权限,提供给checkboxlist
		$allPrivileges = AuthItem::find()->select(['name','description'])
			->where(['type'=>1])->orderBy('description')->all();
		
		foreach ($allPrivileges as $pri)
		{
			$allPrivilegesArray[$pri->name]=$pri->description;
		}
		//step2. 当前用户的权限
		
		$AuthAssignments=AuthAssignment::find()->select(['item_name'])
			->where(['user_id'=>$id])->orderBy('item_name')->all();
		
		$AuthAssignmentsArray = array();
		
		foreach ($AuthAssignments as $AuthAssignment)
		{
			array_push($AuthAssignmentsArray,$AuthAssignment->item_name);
		}
		
		//step3. 从表单提交的数据,来更新AuthAssignment表,从而用户的角色发生变化
		if(isset($_POST['newPri']))
		{
			AuthAssignment::deleteAll('user_id=:id',[':id'=>$id]);
			
			$newPri = $_POST['newPri'];
			
			$arrlength = count($newPri);
			
			for($x=0;$x<$arrlength;$x++)
			{
				$aPri = new AuthAssignment();
				$aPri->item_name = $newPri[$x];
				$aPri->user_id = $id;
				$aPri->created_at = time();
				
				$aPri->save();
			}
			return $this->redirect(['index']);
		}
		
		//step4. 渲染checkBoxList表单
		
		return $this->render('privilege',['id'=>$id,'AuthAssignmentArray'=>$AuthAssignmentsArray,
			'allPrivilegesArray'=>$allPrivilegesArray]);
		
	}
	
}
